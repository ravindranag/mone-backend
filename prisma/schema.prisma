// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id         String          @id @default(cuid())
  name       String
  username   String          @unique
  email      String          @unique
  password   String
  profilePic String?
  wallet     Wallet?
  groups     UsersInGroups[]
  token      Token?
  joinedAt   DateTime        @default(now())
}

model Group {
  id         String          @id @default(cuid())
  name       String
  isPersonal Boolean         @default(true)
  users      UsersInGroups[]
}

model UsersInGroups {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

model Wallet {
  id     String @id @default(cuid())
  amount Int    @default(0)
  userId String @unique
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Transaction {
  id        String              @id @default(cuid())
  type      TransactionType     @default(TRANSFER)
  details   TransactionDetails?
  message   String?
  createdAt DateTime            @default(now())
}

enum TransactionType {
  EXPENSE
  TRANSFER
}

model TransactionGroup {
  id       String @id @default(cuid())
  name     String
  amount   Int
  paidById String
}

model TransactionDetails {
  id            String       @id @default(cuid())
  transactionId String       @unique
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  from          String?
  to            String?
  wallet        String?

  @@index([transactionId])
}

model Token {
  id        String @id @default(cuid())
  accessKey String @default(uuid())
  userId    String @unique
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accessKey, userId])
}
